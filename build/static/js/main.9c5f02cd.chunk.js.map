{"version":3,"sources":["components/Header.js","components/Break.js","components/Session.js","components/TimeLeft.js","components/App.js","components/usetoState.js","serviceWorker.js","index.js"],"names":["Header","props","className","title","Break","breakLengthSec","incrementLength","decrementLength","breakLengthMin","moment","duration","minutes","type","data-type","onClick","name","value","min","max","readOnly","Session","sessionLengthSec","decrementSessionLength","incrementSessionLength","sessionLengthMin","momentDurationFormatSetup","TimeLeft","timeLeft","isStart","currentSession","startTimer","reset","formattedTimeLeft","format","trim","id","App","useState","setsessionLength","setbreakLength","setCurrentSession","intervalId","setIntervalId","setTimeLeft","useEffect","newLength","clearInterval","newInterval","setInterval","prevState","newValue","usetoState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9c5f02cd.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = (props) => {\n\n    return(\n        <header className=\"App-header\">\n            <p>{props.title}</p>\n        </header>\n    )\n\n}\n\nexport default Header;","import React from 'react';\nimport moment from 'moment'\n\n\nconst Break = ({breakLengthSec,incrementLength,decrementLength}) => {\n\n    const breakLengthMin =  moment.duration(breakLengthSec,'s').minutes();\n    return(\n        <div>\n            <h2>Break Length</h2>\n            <div className=\"input-group center\">\n                <span className=\"input-group-btn\">\n                    <button type=\"button\" className=\"btn btn-danger btn-number\"  data-type=\"minus\" onClick={decrementLength}>\n                        <span className=\"glyphicon glyphicon-minus\"></span>\n                    </button>\n                </span>\n                <input type=\"text\" name=\"break\" className=\"form-control input-number\" value={breakLengthMin} min=\"0\" max=\"60\" readOnly/>\n                <span className=\"input-group-btn\">\n                    <button type=\"button\" className=\"btn btn-success btn-number\" data-type=\"plus\" onClick={incrementLength} >\n                        <span className=\"glyphicon glyphicon-plus\"></span>\n                    </button>\n                </span>\n            </div>\n         </div>\n\n    )\n\n}\n\nexport default Break;","import React from 'react';\nimport moment from 'moment'\n\n\nconst Session = ({sessionLengthSec,decrementSessionLength,incrementSessionLength}) => {\n   \n    const sessionLengthMin =  moment.duration(sessionLengthSec,'s').minutes();\n\n    return(\n        <div>\n            <h2>Session Length</h2>\n        <div className=\"input-group center\">\n          <span className=\"input-group-btn\">\n              <button type=\"button\" className=\"btn btn-danger btn-number\"  data-type=\"minus\" onClick={decrementSessionLength}>\n                <span className=\"glyphicon glyphicon-minus\"></span>\n              </button>\n          </span>\n          <input type=\"text\" name=\"break\" className=\"form-control input-number\" value={sessionLengthMin} min=\"0\" max=\"60\" readOnly/>\n          <span className=\"input-group-btn\">\n              <button type=\"button\" className=\"btn btn-success btn-number\" data-type=\"plus\" onClick={incrementSessionLength} >\n                  <span className=\"glyphicon glyphicon-plus\"></span>\n              </button>\n          </span>\n      </div>\n      </div>\n    )\n\n}\n\nexport default Session;","import React from 'react';\nimport moment from 'moment';\nimport momentDurationFormatSetup from \"moment-duration-format\";\nmomentDurationFormatSetup(moment);\n\n\nconst TimeLeft = ({timeLeft,isStart,currentSession,startTimer,reset}) => {\n   \n\n    const formattedTimeLeft = moment.duration(timeLeft, 's').format('mm:ss',{trim:false});\n    return(\n     <div className=\"main\">\n        <p id=\"timer-label\">{currentSession}</p>\n        <h2 id=\"time-left\">{formattedTimeLeft}</h2>\n        <button type=\"button\" className={isStart ? 'Stop' : 'Start'} onClick={startTimer}>{isStart ? 'Stop' : 'Start'}</button>\n        <button type=\"button\" className = \"Reset\" onClick={reset}>Reset</button>\n\n    </div>\n    )\n  \n}\nexport default TimeLeft;","import React from 'react';\nimport Header from './Header';\nimport '../App.css';\nimport Break from './Break';\nimport Session from './Session';\nimport TimeLeft from './TimeLeft';\nimport usetoState from './usetoState';\n\nfunction App() {\n  const { \n          breakLengthSec,\n          sessionLengthSec,\n          decrementSessionLength,\n          incrementSessionLength,\n          decrementLength,\n          incrementLength,\n          currentSession,\n          isStart,\n          timeLeft,\n          startTimer,\n          reset     \n          } = usetoState()\n         \n\n  return (\n    <div className=\"App\">\n        <Header title=\"Pomodoro Clock\"/>\n        <Break breakLengthSec={breakLengthSec} incrementLength={incrementLength} decrementLength={decrementLength} />\n        <TimeLeft timeLeft={timeLeft} isStart={isStart} currentSession={currentSession} startTimer = {startTimer}  reset={reset}/>\n        <Session sessionLengthSec={sessionLengthSec} decrementSessionLength={decrementSessionLength} incrementSessionLength={incrementSessionLength}/>\n    </div>\n  );\n}\n\nexport default App;\n","import {useState,useEffect} from 'react';\n\n\nexport default () => {\nconst [sessionLengthSec,setsessionLength] = useState(60*25)\nconst [breakLengthSec,setbreakLength] = useState(300)\nconst [currentSession,setCurrentSession] = useState(\"Session\");\nconst [intervalId,setIntervalId] = useState(null);\nconst [timeLeft, setTimeLeft] = useState(sessionLengthSec);\n\nuseEffect(()=>{\n    setTimeLeft(sessionLengthSec)\n},[sessionLengthSec]);\n\nconst isStart = intervalId !== null;\n\n\nreturn{\n    breakLengthSec,\n    sessionLengthSec,\n    decrementSessionLength : () => {\n        const newLength = sessionLengthSec - 60;\n        if(newLength<=0){\n            setsessionLength(0)\n        }\n        else{\n            setsessionLength(newLength)\n        }\n    },\n\n    incrementSessionLength : () => {\n        setsessionLength(sessionLengthSec + 60);\n    },\n\n\n    decrementLength : () => {\n        const newLength = breakLengthSec - 60;\n        if(newLength<=0){\n            setbreakLength(0)\n        }\n        else{\n            setbreakLength(newLength)\n        }\n    },\n\n    incrementLength : () => {\n        setbreakLength(breakLengthSec + 60);\n    },\n    currentSession,\n    isStart,\n    timeLeft,\n    startTimer : () => {\n            if(isStart){  //Stop\n                clearInterval(intervalId);  \n                setIntervalId(null)\n            }\n            else{   //start\n                const newInterval =  setInterval(() => {\n                    setTimeLeft(prevState => {\n                        const newValue = prevState-1;\n                        if(newValue>=0)\n                            return newValue;\n                        if(currentSession === \"Session\"){   //Changing when session length over\n                            setCurrentSession(\"Break\");\n                            setTimeLeft(breakLengthSec)\n                        }\n                        else if(currentSession === \"Break\"){\n                            setCurrentSession(\"Session\"); //Changing when break length over\n                            setTimeLeft(sessionLengthSec)\n                            }\n                        });\n                    }, 1000);\n                    setIntervalId(newInterval)\n            }\n        },\n        reset : () => {\n            if(!isStart){\n                setbreakLength(300);\n                setsessionLength(60*25);\n                setTimeLeft(60*25); \n            }\n        }\n\n\n\n}\n\n}\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}