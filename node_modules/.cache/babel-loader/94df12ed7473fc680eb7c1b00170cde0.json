{"ast":null,"code":"import { useState, useEffect } from 'react';\nexport default (initialState => {\n  const [sessionLengthSec, setsessionLength] = useState(60 * 25);\n  const [breakLengthSec, setbreakLength] = useState(300);\n  const [currentSession, setCurrentSession] = useState(\"Session\");\n  const [intervalId, setIntervalId] = useState(null);\n  const [timeLeft, setTimeLeft] = useState(sessionLengthSec);\n  useEffect(() => {\n    setTimeLeft(sessionLengthSec);\n  }, [sessionLengthSec]);\n  const isStart = intervalId !== null;\n  return {\n    breakLengthSec,\n    sessionLengthSec,\n    decrementSessionLength: () => {\n      const newLength = sessionLengthSec - 60;\n\n      if (newLength <= 0) {\n        setsessionLength(0);\n      } else {\n        setsessionLength(newLength);\n      }\n    },\n    incrementSessionLength: () => {\n      setsessionLength(sessionLengthSec + 60);\n    },\n    decrementLength: () => {\n      const newLength = breakLengthSec - 60;\n\n      if (newLength <= 0) {\n        setbreakLength(0);\n      } else {\n        setbreakLength(newLength);\n      }\n    },\n    incrementLength: () => {\n      setbreakLength(breakLengthSec + 60);\n    },\n    currentSession,\n    isStart,\n    timeLeft,\n    startTimer: () => {\n      if (isStart) {\n        //Stop\n        clearInterval(intervalId);\n        setIntervalId(null);\n      } else {\n        //start\n        const newInterval = setInterval(() => {\n          setTimeLeft(prevState => {\n            const newValue = prevState - 1;\n            if (newValue >= 0) return newValue;\n\n            if (currentSession === \"Session\") {\n              //Changing when session length over\n              setCurrentSession(\"Break\");\n              setTimeLeft(breakLengthSec);\n            } else if (currentSession === \"Break\") {\n              setCurrentSession(\"Session\"); //Changing when break length over\n\n              setTimeLeft(sessionLengthSec);\n            }\n          });\n        }, 1000);\n        setIntervalId(newInterval);\n      }\n    },\n    reset: () => {\n      if (!isStart) {\n        setbreakLength(300);\n        setsessionLength(60 * 25);\n        setTimeLeft(60 * 25);\n      }\n    }\n  };\n});","map":{"version":3,"sources":["/Users/graj/projects/pomodoro-clock/pomodoro-clock/src/components/usetoState.js"],"names":["useState","useEffect","initialState","sessionLengthSec","setsessionLength","breakLengthSec","setbreakLength","currentSession","setCurrentSession","intervalId","setIntervalId","timeLeft","setTimeLeft","isStart","decrementSessionLength","newLength","incrementSessionLength","decrementLength","incrementLength","startTimer","clearInterval","newInterval","setInterval","prevState","newValue","reset"],"mappings":"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","sourcesContent":["import {useState,useEffect} from 'react';\n\n\nexport default (initialState) => {\nconst [sessionLengthSec,setsessionLength] = useState(60*25)\n const [breakLengthSec,setbreakLength] = useState(300)\nconst [currentSession,setCurrentSession] = useState(\"Session\");\nconst [intervalId,setIntervalId] = useState(null);\nconst [timeLeft, setTimeLeft] = useState(sessionLengthSec);\n\nuseEffect(()=>{\n    setTimeLeft(sessionLengthSec)\n},[sessionLengthSec]);\n\nconst isStart = intervalId !== null;\n\n\nreturn{\n    breakLengthSec,\n    sessionLengthSec,\n    decrementSessionLength : () => {\n        const newLength = sessionLengthSec - 60;\n        if(newLength<=0){\n            setsessionLength(0)\n        }\n        else{\n            setsessionLength(newLength)\n        }\n    },\n\n    incrementSessionLength : () => {\n        setsessionLength(sessionLengthSec + 60);\n    },\n\n\n    decrementLength : () => {\n        const newLength = breakLengthSec - 60;\n        if(newLength<=0){\n            setbreakLength(0)\n        }\n        else{\n            setbreakLength(newLength)\n        }\n    },\n\n    incrementLength : () => {\n        setbreakLength(breakLengthSec + 60);\n    },\n    currentSession,\n    isStart,\n    timeLeft,\n    startTimer : () => {\n            if(isStart){  //Stop\n                clearInterval(intervalId);  \n                setIntervalId(null)\n            }\n            else{   //start\n                const newInterval =  setInterval(() => {\n                    setTimeLeft(prevState => {\n                        const newValue = prevState-1;\n                        if(newValue>=0)\n                            return newValue;\n                        if(currentSession === \"Session\"){   //Changing when session length over\n                            setCurrentSession(\"Break\");\n                            setTimeLeft(breakLengthSec)\n                        }\n                        else if(currentSession === \"Break\"){\n                            setCurrentSession(\"Session\"); //Changing when break length over\n                            setTimeLeft(sessionLengthSec)\n                            }\n                        });\n                    }, 1000);\n                    setIntervalId(newInterval)\n            }\n        },\n        reset : () => {\n            if(!isStart){\n                setbreakLength(300);\n                setsessionLength(60*25);\n                setTimeLeft(60*25); \n            }\n        }\n\n\n\n}\n\n}\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}