{"ast":null,"code":"import { useState } from 'react';\nexport default (initialState => {\n  const [sessionLengthSec, setsessionLength] = useState(60 * 25);\n  const [breakLengthSec, setbreakLength] = useState(300);\n  const [currentSession, setCurrentSession] = useState(\"Session\");\n  const [intervalId, setIntervalId] = useState(null);\n  const [timeLeft, setTimeLeft] = useState(sessionLengthSec);\n  useEffect(() => {\n    setTimeLeft(sessionLengthSec);\n  }, [sessionLengthSec]);\n  const isStart = intervalId !== null;\n  return {\n    breakLengthSec,\n    sessionLengthSec,\n    decrementSessionLength: () => {\n      const newLength = sessionLengthSec - 60;\n\n      if (newLength <= 0) {\n        setsessionLength(0);\n      } else {\n        setsessionLength(newLength);\n      }\n    },\n    incrementSessionLength: () => {\n      setsessionLength(sessionLengthSec + 60);\n    },\n    decrementLength: () => {\n      const newLength = breakLengthSec - 60;\n\n      if (newLength <= 0) {\n        setbreakLength(0);\n      } else {\n        setbreakLength(newLength);\n      }\n    },\n    incrementLength: () => {\n      setbreakLength(breakLengthSec + 60);\n    },\n    currentSession,\n    isStart,\n    timeLeft,\n    startTimer: () => {\n      if (isStart) {\n        //Stop\n        clearInterval(intervalId);\n        setIntervalId(null);\n      } else {\n        //start\n        const newInterval = setInterval(() => {\n          setTimeLeft(prevState => {\n            const newValue = prevState - 1;\n            if (newValue >= 0) return newValue;\n\n            if (currentSession === \"Session\") {\n              //Changing when session length over\n              setCurrentSession(\"Break\");\n              setTimeLeft(breakLengthSec);\n            } else if (currentSession === \"Break\") {\n              setCurrentSession(\"Session\"); //Changing when break length over\n\n              setTimeLeft(sessionLengthSec);\n            }\n          });\n        }, 1000);\n        setIntervalId(newInterval);\n      }\n    },\n    reset: () => {\n      if (!isStart) {\n        setbreakLength(300);\n        setsessionLength(60 * 25);\n        setTimeLeft(60 * 25);\n      }\n    }\n  };\n});","map":{"version":3,"sources":["/Users/graj/projects/pomodoro-clock/pomodoro-clock/src/components/usetoState.js"],"names":["useState","initialState","sessionLengthSec","setsessionLength","breakLengthSec","setbreakLength","currentSession","setCurrentSession","intervalId","setIntervalId","timeLeft","setTimeLeft","useEffect","isStart","decrementSessionLength","newLength","incrementSessionLength","decrementLength","incrementLength","startTimer","clearInterval","newInterval","setInterval","prevState","newValue","reset"],"mappings":"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","sourcesContent":["import {useState} from 'react';\n\n\nexport default (initialState) => {\nconst [sessionLengthSec,setsessionLength] = useState(60*25)\n const [breakLengthSec,setbreakLength] = useState(300)\nconst [currentSession,setCurrentSession] = useState(\"Session\");\nconst [intervalId,setIntervalId] = useState(null);\nconst [timeLeft, setTimeLeft] = useState(sessionLengthSec);\n\nuseEffect(()=>{\n    setTimeLeft(sessionLengthSec)\n},[sessionLengthSec]);\n\nconst isStart = intervalId !== null;\n\n\nreturn{\n  breakLengthSec,\n  sessionLengthSec,\n  decrementSessionLength : () => {\n      const newLength = sessionLengthSec - 60;\n      if(newLength<=0){\n          setsessionLength(0)\n      }\n      else{\n          setsessionLength(newLength)\n      }\n  },\n\n  incrementSessionLength : () => {\n      setsessionLength(sessionLengthSec + 60);\n  },\n\n\n  decrementLength : () => {\n      const newLength = breakLengthSec - 60;\n      if(newLength<=0){\n          setbreakLength(0)\n      }\n      else{\n          setbreakLength(newLength)\n      }\n  },\n\n  incrementLength : () => {\n      setbreakLength(breakLengthSec + 60);\n  },\n  currentSession,\n  isStart,\n  timeLeft,\n  startTimer : () => {\n        if(isStart){  //Stop\n            clearInterval(intervalId);  \n            setIntervalId(null)\n        }\n        else{   //start\n            const newInterval =  setInterval(() => {\n                setTimeLeft(prevState => {\n                    const newValue = prevState-1;\n                    if(newValue>=0)\n                        return newValue;\n                    if(currentSession === \"Session\"){   //Changing when session length over\n                        setCurrentSession(\"Break\");\n                        setTimeLeft(breakLengthSec)\n                    }\n                    else if(currentSession === \"Break\"){\n                        setCurrentSession(\"Session\"); //Changing when break length over\n                        setTimeLeft(sessionLengthSec)\n                        }\n                    });\n                }, 1000);\n                setIntervalId(newInterval)\n        }\n    },\n    reset : () => {\n        if(!isStart){\n            setbreakLength(300);\n            setsessionLength(60*25);\n            setTimeLeft(60*25); \n        }\n    }\n\n\n\n}\n\n}\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}