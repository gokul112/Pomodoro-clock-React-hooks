{"ast":null,"code":"var _jsxFileName = \"/Users/graj/projects/pomodoro-clock/pomodoro-clock/src/components/TimeLeft.js\";\nimport React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport momentDurationFormatSetup from \"moment-duration-format\";\nmomentDurationFormatSetup(moment);\n\nconst TimeLeft = ({\n  breakLengthSec,\n  sessionLengthSec,\n  setsessionLength,\n  setbreakLength\n}) => {\n  const [currentSession, setCurrentSession] = useState(\"Session\");\n  const [intervalId, setIntervalId] = useState(null);\n  const [timeLeft, setTimeLeft] = useState(sessionLengthSec);\n  useEffect(() => {\n    setTimeLeft(sessionLengthSec);\n  }, [sessionLengthSec]);\n  const isStart = intervalId !== null;\n\n  const startTimer = () => {\n    if (isStart) {\n      clearInterval(intervalId);\n      setIntervalId(null);\n    } else {\n      const newInterval = setInterval(() => {\n        setTimeLeft(prevState => {\n          const newValue = prevState - 1;\n          if (newValue >= 0) return newValue;\n\n          if (currentSession == \"Session\") {\n            setCurrentSession(\"Break\");\n            setTimeLeft(breakLengthSec);\n          } else if (currentSession == \"Break\") {\n            setCurrentSession(\"Session\");\n            setTimeLeft(sessionLengthSec);\n          }\n        });\n      }, 1000);\n      setIntervalId(newInterval);\n    }\n  };\n\n  const reset = () => {\n    if (!isStart) {\n      setbreakLength(300);\n      setsessionLength(60 * 25);\n      setTimeLeft(60 * 25);\n    }\n  };\n\n  const formattedTimeLeft = moment.duration(timeLeft, 's').format('mm:ss');\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    id: \"timer-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, currentSession), /*#__PURE__*/React.createElement(\"h2\", {\n    id: \"time-left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, formattedTimeLeft), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: isStart ? 'Stop' : 'Start',\n    onClick: startTimer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, isStart ? 'Stop' : 'Start'), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"Reset\",\n    onClick: reset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, \"Reset\"));\n};\n\nexport default TimeLeft;","map":{"version":3,"sources":["/Users/graj/projects/pomodoro-clock/pomodoro-clock/src/components/TimeLeft.js"],"names":["React","useState","useEffect","moment","momentDurationFormatSetup","TimeLeft","breakLengthSec","sessionLengthSec","setsessionLength","setbreakLength","currentSession","setCurrentSession","intervalId","setIntervalId","timeLeft","setTimeLeft","isStart","startTimer","clearInterval","newInterval","setInterval","prevState","newValue","reset","formattedTimeLeft","duration","format"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport momentDurationFormatSetup from \"moment-duration-format\";\nmomentDurationFormatSetup(moment);\n\n\nconst TimeLeft = ({breakLengthSec,sessionLengthSec,setsessionLength,setbreakLength}) => {\n    const [currentSession,setCurrentSession] = useState(\"Session\");\n    const [intervalId,setIntervalId] = useState(null);\n    const [timeLeft, setTimeLeft] = useState(sessionLengthSec);\n\n    useEffect(()=>{\n        setTimeLeft(sessionLengthSec)\n    },[sessionLengthSec]);\n\n    const isStart = intervalId !== null;\n\n    const startTimer = () => {\n            if(isStart){\n                clearInterval(intervalId);\n                setIntervalId(null)\n            }\n            else{\n            const newInterval =  setInterval(() => {\n                setTimeLeft(prevState => {\n                    const newValue = prevState-1;\n                    if(newValue>=0)\n                        return newValue;\n                    if(currentSession == \"Session\"){\n                        setCurrentSession(\"Break\");\n                        setTimeLeft(breakLengthSec)\n                    }\n                    else if(currentSession == \"Break\"){\n                        setCurrentSession(\"Session\");\n                        setTimeLeft(sessionLengthSec)\n                        }\n                    });\n                }, 1000);\n                setIntervalId(newInterval)\n            }\n    }\n    const reset = () => {\n        if(!isStart){\n            setbreakLength(300);\n            setsessionLength(60*25);\n            setTimeLeft(60*25);\n        }\n    }\n\n    const formattedTimeLeft = moment.duration(timeLeft, 's').format('mm:ss');\n    return(\n     <div className=\"main\">\n        <p id=\"timer-label\">{currentSession}</p>\n        <h2 id=\"time-left\">{formattedTimeLeft}</h2>\n        <button type=\"button\" className={isStart ? 'Stop' : 'Start'} onClick={startTimer}>{isStart ? 'Stop' : 'Start'}</button>\n        <button type=\"button\" className = \"Reset\" onClick={reset}>Reset</button>\n\n    </div>\n    )\n  \n}\nexport default TimeLeft;"]},"metadata":{},"sourceType":"module"}