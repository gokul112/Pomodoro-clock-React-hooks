{"ast":null,"code":"var _jsxFileName = \"/Users/graj/projects/pomodoro-clock/pomodoro-clock/src/components/TimeLeft.js\";\nimport React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport momentDurationFormatSetup from \"moment-duration-format\";\nmomentDurationFormatSetup(moment);\n\nconst TimeLeft = ({\n  breakLengthSec,\n  sessionLengthSec\n}) => {\n  const [currentSession, setCurrentSession] = useState(\"Session\");\n  const [intervalId, setIntervalId] = useState(null);\n  const [timeLeft, setTimeLeft] = useState(sessionLengthSec);\n  useEffect(() => {\n    setTimeLeft(sessionLengthSec);\n  }, [sessionLengthSec]);\n  const isStart = intervalId !== null;\n\n  const startTimer = () => {\n    if (isStart) {\n      clearInterval(intervalId);\n      setIntervalId(null);\n    } else {\n      const newInterval = setInterval(() => {\n        setTimeLeft(prevState => {\n          const newValue = prevState - 1;\n          if (newValue >= 0) return newValue;\n\n          if (currentSession == \"Session\") {\n            setCurrentSession(\"Break\");\n            setTimeLeft(breakLengthSec);\n          } else if (currentSession == \"Break\") {\n            setCurrentSession(\"Session\");\n            setTimeLeft(sessionLengthSec);\n          }\n        });\n      }, 100);\n      setIntervalId(newInterval);\n    }\n  };\n\n  const formattedTimeLeft = moment.duration(timeLeft, 's').format('mm:ss');\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 6\n    }\n  }, formattedTimeLeft, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: startTimer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, isStart ? 'Stop' : 'Start'));\n};\n\nexport default TimeLeft;","map":{"version":3,"sources":["/Users/graj/projects/pomodoro-clock/pomodoro-clock/src/components/TimeLeft.js"],"names":["React","useState","useEffect","moment","momentDurationFormatSetup","TimeLeft","breakLengthSec","sessionLengthSec","currentSession","setCurrentSession","intervalId","setIntervalId","timeLeft","setTimeLeft","isStart","startTimer","clearInterval","newInterval","setInterval","prevState","newValue","formattedTimeLeft","duration","format"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,yBAAP,MAAsC,wBAAtC;AACAA,yBAAyB,CAACD,MAAD,CAAzB;;AAGA,MAAME,QAAQ,GAAG,CAAC;AAACC,EAAAA,cAAD;AAAgBC,EAAAA;AAAhB,CAAD,KAAuC;AACpD,QAAM,CAACC,cAAD,EAAgBC,iBAAhB,IAAqCR,QAAQ,CAAC,SAAD,CAAnD;AACA,QAAM,CAACS,UAAD,EAAYC,aAAZ,IAA6BV,QAAQ,CAAC,IAAD,CAA3C;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAACM,gBAAD,CAAxC;AAEAL,EAAAA,SAAS,CAAC,MAAI;AACVW,IAAAA,WAAW,CAACN,gBAAD,CAAX;AACH,GAFQ,EAEP,CAACA,gBAAD,CAFO,CAAT;AAIA,QAAMO,OAAO,GAAGJ,UAAU,KAAK,IAA/B;;AACA,QAAMK,UAAU,GAAG,MAAM;AACzB,QAAGD,OAAH,EAAW;AACPE,MAAAA,aAAa,CAACN,UAAD,CAAb;AACAC,MAAAA,aAAa,CAAC,IAAD,CAAb;AACH,KAHD,MAII;AACJ,YAAMM,WAAW,GAAIC,WAAW,CAAC,MAAM;AACnCL,QAAAA,WAAW,CAACM,SAAS,IAAI;AACrB,gBAAMC,QAAQ,GAAGD,SAAS,GAAC,CAA3B;AACC,cAAGC,QAAQ,IAAE,CAAb,EACG,OAAOA,QAAP;;AACJ,cAAGZ,cAAc,IAAI,SAArB,EAA+B;AAC3BC,YAAAA,iBAAiB,CAAC,OAAD,CAAjB;AACAI,YAAAA,WAAW,CAACP,cAAD,CAAX;AACH,WAHD,MAIK,IAAGE,cAAc,IAAI,OAArB,EAA6B;AAC9BC,YAAAA,iBAAiB,CAAC,SAAD,CAAjB;AACAI,YAAAA,WAAW,CAACN,gBAAD,CAAX;AACH;AACJ,SAZU,CAAX;AAaH,OAd+B,EAc7B,GAd6B,CAAhC;AAeAI,MAAAA,aAAa,CAACM,WAAD,CAAb;AACC;AAEA,GAxBD;;AA0BA,QAAMI,iBAAiB,GAAGlB,MAAM,CAACmB,QAAP,CAAgBV,QAAhB,EAA0B,GAA1B,EAA+BW,MAA/B,CAAsC,OAAtC,CAA1B;AACA,sBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMF,iBAAN,eACG;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAEN,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4CD,OAAO,GAAG,MAAH,GAAY,OAA/D,CADH,CADD;AAMH,CA3CD;;AA4CA,eAAeT,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport momentDurationFormatSetup from \"moment-duration-format\";\nmomentDurationFormatSetup(moment);\n\n\nconst TimeLeft = ({breakLengthSec,sessionLengthSec}) => {\n    const [currentSession,setCurrentSession] = useState(\"Session\");\n    const [intervalId,setIntervalId] = useState(null);\n    const [timeLeft, setTimeLeft] = useState(sessionLengthSec);\n\n    useEffect(()=>{\n        setTimeLeft(sessionLengthSec)\n    },[sessionLengthSec]);\n\n    const isStart = intervalId !== null;\n    const startTimer = () => {\n    if(isStart){\n        clearInterval(intervalId);\n        setIntervalId(null)\n    }\n    else{\n    const newInterval =  setInterval(() => {\n        setTimeLeft(prevState => {\n            const newValue = prevState-1;\n             if(newValue>=0)\n                return newValue;\n            if(currentSession == \"Session\"){\n                setCurrentSession(\"Break\");\n                setTimeLeft(breakLengthSec)\n            }\n            else if(currentSession == \"Break\"){\n                setCurrentSession(\"Session\");\n                setTimeLeft(sessionLengthSec)\n            }\n        });\n    }, 100);\n    setIntervalId(newInterval)\n    }\n    \n    }\n\n    const formattedTimeLeft = moment.duration(timeLeft, 's').format('mm:ss');\n    return(\n     <div>{formattedTimeLeft}\n        <button type=\"button\" onClick={startTimer}>{isStart ? 'Stop' : 'Start'}</button>\n    </div>\n    )\n  \n}\nexport default TimeLeft;"]},"metadata":{},"sourceType":"module"}