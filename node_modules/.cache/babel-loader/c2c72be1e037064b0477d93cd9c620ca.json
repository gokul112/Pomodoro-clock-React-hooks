{"ast":null,"code":"import _slicedToArray from\"/Users/graj/projects/Pomodoro-clock-React-hooks/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from'react';export default(function(){var _useState=useState(60*25),_useState2=_slicedToArray(_useState,2),sessionLengthSec=_useState2[0],setsessionLength=_useState2[1];var _useState3=useState(300),_useState4=_slicedToArray(_useState3,2),breakLengthSec=_useState4[0],setbreakLength=_useState4[1];var _useState5=useState(\"Session\"),_useState6=_slicedToArray(_useState5,2),currentSession=_useState6[0],setCurrentSession=_useState6[1];var _useState7=useState(null),_useState8=_slicedToArray(_useState7,2),intervalId=_useState8[0],setIntervalId=_useState8[1];var _useState9=useState(sessionLengthSec),_useState10=_slicedToArray(_useState9,2),timeLeft=_useState10[0],setTimeLeft=_useState10[1];useEffect(function(){setTimeLeft(sessionLengthSec);},[sessionLengthSec]);var isStart=intervalId!==null;return{breakLengthSec:breakLengthSec,sessionLengthSec:sessionLengthSec,decrementSessionLength:function decrementSessionLength(){var newLength=sessionLengthSec-60;if(newLength<=0){setsessionLength(0);}else{setsessionLength(newLength);}},incrementSessionLength:function incrementSessionLength(){setsessionLength(sessionLengthSec+60);},decrementLength:function decrementLength(){var newLength=breakLengthSec-60;if(newLength<=0){setbreakLength(0);}else{setbreakLength(newLength);}},incrementLength:function incrementLength(){setbreakLength(breakLengthSec+60);},currentSession:currentSession,isStart:isStart,timeLeft:timeLeft,startTimer:function startTimer(){if(isStart){//Stop\nclearInterval(intervalId);setIntervalId(null);}else{//start\nvar newInterval=setInterval(function(){setTimeLeft(function(prevState){var newValue=prevState-1;if(newValue>=0)return newValue;if(currentSession===\"Session\"){//Changing when session length over\nsetCurrentSession(\"Break\");setTimeLeft(breakLengthSec);}else if(currentSession===\"Break\"){setCurrentSession(\"Session\");//Changing when break length over\nsetTimeLeft(sessionLengthSec);}});},1000);setIntervalId(newInterval);}},reset:function reset(){if(!isStart){setbreakLength(300);setsessionLength(60*25);setTimeLeft(60*25);}}};});","map":{"version":3,"sources":["/Users/graj/projects/Pomodoro-clock-React-hooks/src/components/usetoState.js"],"names":["useState","useEffect","sessionLengthSec","setsessionLength","breakLengthSec","setbreakLength","currentSession","setCurrentSession","intervalId","setIntervalId","timeLeft","setTimeLeft","isStart","decrementSessionLength","newLength","incrementSessionLength","decrementLength","incrementLength","startTimer","clearInterval","newInterval","setInterval","prevState","newValue","reset"],"mappings":"sKAAA,OAAQA,QAAR,CAAiBC,SAAjB,KAAiC,OAAjC,CAGA,eAAe,UAAM,eACuBD,QAAQ,CAAC,GAAG,EAAJ,CAD/B,wCACdE,gBADc,eACGC,gBADH,8BAEmBH,QAAQ,CAAC,GAAD,CAF3B,yCAEdI,cAFc,eAECC,cAFD,8BAGsBL,QAAQ,CAAC,SAAD,CAH9B,yCAGdM,cAHc,eAGCC,iBAHD,8BAIcP,QAAQ,CAAC,IAAD,CAJtB,yCAIdQ,UAJc,eAIHC,aAJG,8BAKWT,QAAQ,CAACE,gBAAD,CALnB,0CAKdQ,QALc,gBAKJC,WALI,gBAOrBV,SAAS,CAAC,UAAI,CACVU,WAAW,CAACT,gBAAD,CAAX,CACH,CAFQ,CAEP,CAACA,gBAAD,CAFO,CAAT,CAIA,GAAMU,CAAAA,OAAO,CAAGJ,UAAU,GAAK,IAA/B,CAGA,MAAM,CACFJ,cAAc,CAAdA,cADE,CAEFF,gBAAgB,CAAhBA,gBAFE,CAGFW,sBAAsB,CAAG,iCAAM,CAC3B,GAAMC,CAAAA,SAAS,CAAGZ,gBAAgB,CAAG,EAArC,CACA,GAAGY,SAAS,EAAE,CAAd,CAAgB,CACZX,gBAAgB,CAAC,CAAD,CAAhB,CACH,CAFD,IAGI,CACAA,gBAAgB,CAACW,SAAD,CAAhB,CACH,CACJ,CAXC,CAaFC,sBAAsB,CAAG,iCAAM,CAC3BZ,gBAAgB,CAACD,gBAAgB,CAAG,EAApB,CAAhB,CACH,CAfC,CAkBFc,eAAe,CAAG,0BAAM,CACpB,GAAMF,CAAAA,SAAS,CAAGV,cAAc,CAAG,EAAnC,CACA,GAAGU,SAAS,EAAE,CAAd,CAAgB,CACZT,cAAc,CAAC,CAAD,CAAd,CACH,CAFD,IAGI,CACAA,cAAc,CAACS,SAAD,CAAd,CACH,CACJ,CA1BC,CA4BFG,eAAe,CAAG,0BAAM,CACpBZ,cAAc,CAACD,cAAc,CAAG,EAAlB,CAAd,CACH,CA9BC,CA+BFE,cAAc,CAAdA,cA/BE,CAgCFM,OAAO,CAAPA,OAhCE,CAiCFF,QAAQ,CAARA,QAjCE,CAkCFQ,UAAU,CAAG,qBAAM,CACX,GAAGN,OAAH,CAAW,CAAG;AACVO,aAAa,CAACX,UAAD,CAAb,CACAC,aAAa,CAAC,IAAD,CAAb,CACH,CAHD,IAII,CAAI;AACJ,GAAMW,CAAAA,WAAW,CAAIC,WAAW,CAAC,UAAM,CACnCV,WAAW,CAAC,SAAAW,SAAS,CAAI,CACrB,GAAMC,CAAAA,QAAQ,CAAGD,SAAS,CAAC,CAA3B,CACA,GAAGC,QAAQ,EAAE,CAAb,CACI,MAAOA,CAAAA,QAAP,CACJ,GAAGjB,cAAc,GAAK,SAAtB,CAAgC,CAAI;AAChCC,iBAAiB,CAAC,OAAD,CAAjB,CACAI,WAAW,CAACP,cAAD,CAAX,CACH,CAHD,IAIK,IAAGE,cAAc,GAAK,OAAtB,CAA8B,CAC/BC,iBAAiB,CAAC,SAAD,CAAjB,CAA8B;AAC9BI,WAAW,CAACT,gBAAD,CAAX,CACC,CACJ,CAZM,CAAX,CAaC,CAd2B,CAczB,IAdyB,CAAhC,CAeIO,aAAa,CAACW,WAAD,CAAb,CACP,CACJ,CAzDH,CA0DEI,KAAK,CAAG,gBAAM,CACV,GAAG,CAACZ,OAAJ,CAAY,CACRP,cAAc,CAAC,GAAD,CAAd,CACAF,gBAAgB,CAAC,GAAG,EAAJ,CAAhB,CACAQ,WAAW,CAAC,GAAG,EAAJ,CAAX,CACH,CACJ,CAhEH,CAAN,CAsEC,CApFD","sourcesContent":["import {useState,useEffect} from 'react';\n\n\nexport default () => {\nconst [sessionLengthSec,setsessionLength] = useState(60*25)\nconst [breakLengthSec,setbreakLength] = useState(300)\nconst [currentSession,setCurrentSession] = useState(\"Session\");\nconst [intervalId,setIntervalId] = useState(null);\nconst [timeLeft, setTimeLeft] = useState(sessionLengthSec);\n\nuseEffect(()=>{\n    setTimeLeft(sessionLengthSec)\n},[sessionLengthSec]);\n\nconst isStart = intervalId !== null;\n\n\nreturn{\n    breakLengthSec,\n    sessionLengthSec,\n    decrementSessionLength : () => {\n        const newLength = sessionLengthSec - 60;\n        if(newLength<=0){\n            setsessionLength(0)\n        }\n        else{\n            setsessionLength(newLength)\n        }\n    },\n\n    incrementSessionLength : () => {\n        setsessionLength(sessionLengthSec + 60);\n    },\n\n\n    decrementLength : () => {\n        const newLength = breakLengthSec - 60;\n        if(newLength<=0){\n            setbreakLength(0)\n        }\n        else{\n            setbreakLength(newLength)\n        }\n    },\n\n    incrementLength : () => {\n        setbreakLength(breakLengthSec + 60);\n    },\n    currentSession,\n    isStart,\n    timeLeft,\n    startTimer : () => {\n            if(isStart){  //Stop\n                clearInterval(intervalId);  \n                setIntervalId(null)\n            }\n            else{   //start\n                const newInterval =  setInterval(() => {\n                    setTimeLeft(prevState => {\n                        const newValue = prevState-1;\n                        if(newValue>=0)\n                            return newValue;\n                        if(currentSession === \"Session\"){   //Changing when session length over\n                            setCurrentSession(\"Break\");\n                            setTimeLeft(breakLengthSec)\n                        }\n                        else if(currentSession === \"Break\"){\n                            setCurrentSession(\"Session\"); //Changing when break length over\n                            setTimeLeft(sessionLengthSec)\n                            }\n                        });\n                    }, 1000);\n                    setIntervalId(newInterval)\n            }\n        },\n        reset : () => {\n            if(!isStart){\n                setbreakLength(300);\n                setsessionLength(60*25);\n                setTimeLeft(60*25); \n            }\n        }\n\n\n\n}\n\n}\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}